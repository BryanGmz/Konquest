
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package konquest.backed.analizador.replay;

import konquest.backed.manejadores.*;
import java_cup.runtime.*;
import konquest.backed.objetos.*;
import javax.swing.*;
import konquest.gui.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxReplay extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxReplay() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxReplay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxReplay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\004\000\002\003\003" +
    "\000\002\003\004\000\002\004\004\000\002\004\005\000" +
    "\002\004\004\000\002\004\004\000\002\005\011\000\002" +
    "\006\013\000\002\007\006\000\002\010\013\000\002\011" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\010\003\005\011\007\015\004\001\002\000" +
    "\004\004\061\001\002\000\010\003\005\011\007\015\004" +
    "\001\002\000\010\003\015\011\020\015\014\001\002\000" +
    "\010\003\005\011\007\015\004\001\002\000\004\002\011" +
    "\001\002\000\004\002\001\001\002\000\004\002\ufffe\001" +
    "\002\000\010\003\ufffc\011\ufffc\015\ufffc\001\002\000\006" +
    "\005\026\013\055\001\002\000\010\003\015\011\020\015" +
    "\025\001\002\000\004\015\036\001\002\000\004\002\000" +
    "\001\002\000\010\003\015\011\020\015\025\001\002\000" +
    "\010\003\015\011\020\015\014\001\002\000\010\003\ufffb" +
    "\011\ufffb\015\ufffb\001\002\000\004\002\uffff\001\002\000" +
    "\010\003\ufff7\011\ufff7\015\ufff7\001\002\000\004\005\026" +
    "\001\002\000\004\007\027\001\002\000\004\012\030\001" +
    "\002\000\004\016\031\001\002\000\004\010\032\001\002" +
    "\000\004\012\033\001\002\000\004\017\034\001\002\000" +
    "\004\014\035\001\002\000\004\015\ufff5\001\002\000\006" +
    "\006\046\013\043\001\002\000\010\003\ufffa\011\ufffa\015" +
    "\ufffa\001\002\000\004\015\041\001\002\000\004\013\043" +
    "\001\002\000\010\003\ufff9\011\ufff9\015\ufff9\001\002\000" +
    "\004\005\044\001\002\000\004\014\045\001\002\000\010" +
    "\003\ufff4\011\ufff4\015\ufff4\001\002\000\004\010\047\001" +
    "\002\000\004\012\050\001\002\000\004\020\051\001\002" +
    "\000\004\013\052\001\002\000\004\014\053\001\002\000" +
    "\004\015\ufff6\001\002\000\010\003\ufff8\011\ufff8\015\ufff8" +
    "\001\002\000\004\004\056\001\002\000\004\014\057\001" +
    "\002\000\004\002\ufff2\001\002\000\004\002\ufffd\001\002" +
    "\000\004\007\062\001\002\000\004\012\063\001\002\000" +
    "\004\016\064\001\002\000\004\010\065\001\002\000\004" +
    "\012\066\001\002\000\004\021\067\001\002\000\004\014" +
    "\070\001\002\000\010\003\ufff3\011\ufff3\015\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\006\002\007\010\005\001\001\000\002\001" +
    "\001\000\006\002\057\010\005\001\001\000\012\003\020" +
    "\004\012\006\015\011\016\001\001\000\006\002\011\010" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\053\006\015\001\001\000\006\005\037\007\036\001\001" +
    "\000\002\001\001\000\006\004\023\006\015\001\001\000" +
    "\010\004\021\006\015\011\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxReplay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxReplay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxReplay$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private final ManejadorSintacticoReplay manejadorSintactico = new ManejadorSintacticoReplay();
    private Principal principal;
    private DialogoErrores errores;
    
    public SintaxReplay(LexicoReplay lexer, Principal principal, DialogoErrores errores) { 
        super(lexer);   
        this.principal = principal;
        this.errores = errores;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcciÃ³n: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            errores.agregarErroresTXTSintaxis(
            (("Error Sintaxis Linea #: " + (s.right + 1) 
            + " Columna # " + (s.left + 1) 
            + " Token : -> " + (s.value) + "\n" )));
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxReplay$actions {
  private final SintaxReplay parser;

  /** Constructor */
  CUP$SintaxReplay$actions(SintaxReplay parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxReplay$do_action_part00000000(
    int                        CUP$SintaxReplay$act_num,
    java_cup.runtime.lr_parser CUP$SintaxReplay$parser,
    java.util.Stack            CUP$SintaxReplay$stack,
    int                        CUP$SintaxReplay$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxReplay$result;

      /* select the action based on the action number */
      switch (CUP$SintaxReplay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = start_val;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxReplay$parser.done_parsing();
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= declaracion_replay_inicio declaracion_replay_fin 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		
    if(e != null) {
        principal.setReplay((Replay)e);
        System.out.println("Aceptado");
    } else {
        System.out.println("No Aceptado");
    } 
    
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= declaracion_replay_inicio estructura_replay declaracion_replay_fin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		
    Replay replay = manejadorSintactico.agregarLista(a, e);
    String salida = "";
    if(manejadorSintactico.agregarLista(a, e) != null) {
        principal.setReplay(replay);
        System.out.println("\nAceptado");
    } else {
        System.out.println("No Aceptado");
    } 
    
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= Error inicio 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error inicio 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura_replay ::= estructura_partida 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		RESULT = e;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("estructura_replay",1, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura_replay ::= estructura_replay estructura_partida 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		RESULT = manejadorSintactico.listaArchivos(a, e);
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("estructura_replay",1, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura_partida ::= declaracion_partida_inicio declaracion_partida_fin 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = e;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("estructura_partida",2, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura_partida ::= declaracion_partida_inicio declaracion_archivo declaracion_partida_fin 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = manejadorSintactico.argregarArearTXTArchivoReplay(e, a);
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("estructura_partida",2, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura_partida ::= error estructura_partida 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		parser.syntax_error((Symbol) e); RESULT = a;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("estructura_partida",2, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructura_partida ::= Error estructura_partida 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.peek()).value;
		RESULT = a;
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("estructura_partida",2, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_archivo ::= Menor Texto Ubicacion Igual PathTXT Division Mayor 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-2)).value;
		RESULT = manejadorSintactico.agregarAtributosArchivoTXT(e);
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("declaracion_archivo",3, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_partida_inicio ::= Menor Archivo Nombre Igual Identificador Ubicacion Igual PathCPK Mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = manejadorSintactico.argregarAtributosArchivoReplay(a, e);
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("declaracion_partida_inicio",4, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_partida_fin ::= Menor Division Archivo Mayor 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("declaracion_partida_fin",5, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_replay_inicio ::= Menor Replay Nombre Igual Identificador Ubicacion Igual PathCarpeta Mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-1)).value;
		RESULT = manejadorSintactico.agregarAtributosReplay(a, e);
              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("declaracion_replay_inicio",6, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_replay_fin ::= Menor Division Replay Mayor 
            {
              Object RESULT =null;

              CUP$SintaxReplay$result = parser.getSymbolFactory().newSymbol("declaracion_replay_fin",7, ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.elementAt(CUP$SintaxReplay$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxReplay$stack.peek()), RESULT);
            }
          return CUP$SintaxReplay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxReplay$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxReplay$do_action(
    int                        CUP$SintaxReplay$act_num,
    java_cup.runtime.lr_parser CUP$SintaxReplay$parser,
    java.util.Stack            CUP$SintaxReplay$stack,
    int                        CUP$SintaxReplay$top)
    throws java.lang.Exception
    {
              return CUP$SintaxReplay$do_action_part00000000(
                               CUP$SintaxReplay$act_num,
                               CUP$SintaxReplay$parser,
                               CUP$SintaxReplay$stack,
                               CUP$SintaxReplay$top);
    }
}

}
