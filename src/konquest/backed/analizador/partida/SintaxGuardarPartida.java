
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package konquest.backed.analizador.partida;

import java.util.List;
import konquest.backed.manejadores.*;
import java_cup.runtime.*;
import konquest.backed.objetos.*;
import javax.swing.*;
import konquest.gui.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxGuardarPartida extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxGuardarPartida() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxGuardarPartida(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxGuardarPartida(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\004\007\000\002\005" +
    "\007\000\002\005\006\000\002\006\007\000\002\006\006" +
    "\000\002\007\007\000\002\010\007\000\002\010\006\000" +
    "\002\011\005\000\002\011\007\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\013\003\000\002\013\003\000\002\014\005\000\002\014" +
    "\007\000\002\016\003\000\002\016\003\000\002\015\017" +
    "\000\002\015\017\000\002\015\017\000\002\015\017\000" +
    "\002\015\017\000\002\015\017\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\005\000\002\021\005\000\002\021\007\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\007\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\024\011\000\002\024\011" +
    "\000\002\023\007\000\002\023\007\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\011\000\002\023\011\000\002\023" +
    "\007\000\002\023\007\000\002\023\007\000\002\023\007" +
    "\000\002\023\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\010\003\005\010\006\045\010\001\002\000" +
    "\004\002\ufffe\001\002\000\010\003\005\010\006\045\010" +
    "\001\002\000\004\041\361\001\002\000\004\002\360\001" +
    "\002\000\014\004\022\005\017\006\011\007\020\010\006" +
    "\001\002\000\004\041\353\001\002\000\006\042\344\046" +
    "\345\001\002\000\006\042\ufffc\046\ufffc\001\002\000\006" +
    "\042\ufffd\046\ufffd\001\002\000\006\042\ufffb\046\ufffb\001" +
    "\002\000\006\042\ufffa\046\ufffa\001\002\000\004\041\255" +
    "\001\002\000\004\041\134\001\002\000\006\042\ufff9\046" +
    "\ufff9\001\002\000\004\041\023\001\002\000\004\045\024" +
    "\001\002\000\020\011\034\012\025\013\031\014\027\015" +
    "\026\016\030\033\032\001\002\000\004\041\130\001\002" +
    "\000\004\041\126\001\002\000\004\041\124\001\002\000" +
    "\004\041\122\001\002\000\004\041\120\001\002\000\004" +
    "\041\116\001\002\000\006\042\057\046\060\001\002\000" +
    "\004\041\035\001\002\000\004\045\036\001\002\000\006" +
    "\034\040\035\041\001\002\000\004\046\056\001\002\000" +
    "\004\041\050\001\002\000\004\041\042\001\002\000\004" +
    "\053\043\001\002\000\004\042\044\001\002\000\004\034" +
    "\045\001\002\000\004\041\046\001\002\000\004\053\047" +
    "\001\002\000\004\046\uffbb\001\002\000\004\053\051\001" +
    "\002\000\004\042\052\001\002\000\004\035\053\001\002" +
    "\000\004\041\054\001\002\000\004\053\055\001\002\000" +
    "\004\046\uffbc\001\002\000\006\042\uffb9\046\uffb9\001\002" +
    "\000\020\011\067\012\061\013\065\014\063\015\062\016" +
    "\064\033\066\001\002\000\006\042\ufff3\046\ufff3\001\002" +
    "\000\004\041\112\001\002\000\004\041\110\001\002\000" +
    "\004\041\106\001\002\000\004\041\104\001\002\000\004" +
    "\041\100\001\002\000\004\041\074\001\002\000\004\041" +
    "\070\001\002\000\004\045\071\001\002\000\006\034\040" +
    "\035\041\001\002\000\004\046\073\001\002\000\006\042" +
    "\uffb2\046\uffb2\001\002\000\006\051\077\052\076\001\002" +
    "\000\006\042\uffad\046\uffad\001\002\000\006\042\uffd7\046" +
    "\uffd7\001\002\000\006\042\uffd6\046\uffd6\001\002\000\006" +
    "\043\101\044\102\001\002\000\006\042\uffda\046\uffda\001" +
    "\002\000\006\042\uffdb\046\uffdb\001\002\000\006\042\uffb1" +
    "\046\uffb1\001\002\000\004\053\105\001\002\000\006\042" +
    "\uffaf\046\uffaf\001\002\000\004\053\107\001\002\000\006" +
    "\042\uffb0\046\uffb0\001\002\000\004\053\111\001\002\000" +
    "\006\042\uffae\046\uffae\001\002\000\004\045\113\001\002" +
    "\000\006\034\040\035\041\001\002\000\004\046\115\001" +
    "\002\000\006\042\uffb3\046\uffb3\001\002\000\006\051\077" +
    "\052\076\001\002\000\006\042\uffb4\046\uffb4\001\002\000" +
    "\006\043\101\044\102\001\002\000\006\042\uffb8\046\uffb8" +
    "\001\002\000\004\053\123\001\002\000\006\042\uffb6\046" +
    "\uffb6\001\002\000\004\053\125\001\002\000\006\042\uffb7" +
    "\046\uffb7\001\002\000\004\053\127\001\002\000\006\042" +
    "\uffb5\046\uffb5\001\002\000\004\045\131\001\002\000\006" +
    "\034\040\035\041\001\002\000\004\046\133\001\002\000" +
    "\006\042\uffba\046\uffba\001\002\000\004\047\135\001\002" +
    "\000\004\045\137\001\002\000\006\042\251\050\250\001" +
    "\002\000\010\017\143\026\142\027\140\001\002\000\004" +
    "\041\223\001\002\000\004\046\222\001\002\000\004\041" +
    "\177\001\002\000\004\041\144\001\002\000\006\051\077" +
    "\052\076\001\002\000\004\042\146\001\002\000\006\026" +
    "\150\027\147\001\002\000\004\041\167\001\002\000\004" +
    "\041\151\001\002\000\004\047\152\001\002\000\004\051" +
    "\154\001\002\000\006\042\156\050\155\001\002\000\006" +
    "\042\uffcc\050\uffcc\001\002\000\004\042\160\001\002\000" +
    "\004\051\157\001\002\000\006\042\uffcb\050\uffcb\001\002" +
    "\000\004\027\161\001\002\000\004\041\162\001\002\000" +
    "\010\036\163\037\164\040\166\001\002\000\006\042\uffcf" +
    "\046\uffcf\001\002\000\006\042\uffce\046\uffce\001\002\000" +
    "\004\046\uffd5\001\002\000\006\042\uffcd\046\uffcd\001\002" +
    "\000\010\036\163\037\164\040\166\001\002\000\004\042" +
    "\171\001\002\000\004\026\172\001\002\000\004\041\173" +
    "\001\002\000\004\047\174\001\002\000\004\051\154\001" +
    "\002\000\006\042\156\050\176\001\002\000\004\046\uffd4" +
    "\001\002\000\004\047\200\001\002\000\004\051\154\001" +
    "\002\000\006\042\156\050\202\001\002\000\004\042\203" +
    "\001\002\000\006\017\205\027\204\001\002\000\004\041" +
    "\214\001\002\000\004\041\206\001\002\000\006\051\077" +
    "\052\076\001\002\000\004\042\210\001\002\000\004\027" +
    "\211\001\002\000\004\041\212\001\002\000\010\036\163" +
    "\037\164\040\166\001\002\000\004\046\uffd0\001\002\000" +
    "\010\036\163\037\164\040\166\001\002\000\004\042\216" +
    "\001\002\000\004\017\217\001\002\000\004\041\220\001" +
    "\002\000\006\051\077\052\076\001\002\000\004\046\uffd1" +
    "\001\002\000\006\042\uffd9\050\uffd9\001\002\000\010\036" +
    "\163\037\164\040\166\001\002\000\004\042\225\001\002" +
    "\000\006\017\227\026\226\001\002\000\004\041\240\001" +
    "\002\000\004\041\230\001\002\000\006\051\077\052\076" +
    "\001\002\000\004\042\232\001\002\000\004\026\233\001" +
    "\002\000\004\041\234\001\002\000\004\047\235\001\002" +
    "\000\004\051\154\001\002\000\006\042\156\050\237\001" +
    "\002\000\004\046\uffd3\001\002\000\004\047\241\001\002" +
    "\000\004\051\154\001\002\000\006\042\156\050\243\001" +
    "\002\000\004\042\244\001\002\000\004\017\245\001\002" +
    "\000\004\041\246\001\002\000\006\051\077\052\076\001" +
    "\002\000\004\046\uffd2\001\002\000\006\042\uffee\046\uffee" +
    "\001\002\000\004\045\252\001\002\000\010\017\143\026" +
    "\142\027\140\001\002\000\004\046\254\001\002\000\006" +
    "\042\uffd8\050\uffd8\001\002\000\004\047\256\001\002\000" +
    "\006\045\261\050\257\001\002\000\006\042\ufff1\046\ufff1" +
    "\001\002\000\006\042\340\050\337\001\002\000\020\017" +
    "\270\020\262\021\263\022\264\023\266\024\271\025\265" +
    "\001\002\000\004\041\335\001\002\000\004\041\333\001" +
    "\002\000\004\041\331\001\002\000\004\041\327\001\002" +
    "\000\004\041\325\001\002\000\006\042\276\046\277\001" +
    "\002\000\004\041\274\001\002\000\004\041\272\001\002" +
    "\000\004\053\273\001\002\000\006\042\uffe4\046\uffe4\001" +
    "\002\000\004\051\275\001\002\000\006\042\uffe9\046\uffe9" +
    "\001\002\000\020\017\305\020\300\021\301\022\302\023" +
    "\304\024\306\025\303\001\002\000\006\042\uffeb\050\uffeb" +
    "\001\002\000\004\041\323\001\002\000\004\041\321\001" +
    "\002\000\004\041\317\001\002\000\004\041\315\001\002" +
    "\000\004\041\313\001\002\000\004\041\311\001\002\000" +
    "\004\041\307\001\002\000\004\053\310\001\002\000\006" +
    "\042\uffdd\046\uffdd\001\002\000\004\051\312\001\002\000" +
    "\006\042\uffe2\046\uffe2\001\002\000\004\053\314\001\002" +
    "\000\006\042\uffde\046\uffde\001\002\000\004\053\316\001" +
    "\002\000\006\042\uffdc\046\uffdc\001\002\000\004\053\320" +
    "\001\002\000\006\042\uffe0\046\uffe0\001\002\000\004\054" +
    "\322\001\002\000\006\042\uffdf\046\uffdf\001\002\000\004" +
    "\053\324\001\002\000\006\042\uffe1\046\uffe1\001\002\000" +
    "\004\053\326\001\002\000\006\042\uffe5\046\uffe5\001\002" +
    "\000\004\053\330\001\002\000\006\042\uffe3\046\uffe3\001" +
    "\002\000\004\053\332\001\002\000\006\042\uffe7\046\uffe7" +
    "\001\002\000\004\054\334\001\002\000\006\042\uffe6\046" +
    "\uffe6\001\002\000\004\053\336\001\002\000\006\042\uffe8" +
    "\046\uffe8\001\002\000\006\042\ufff2\046\ufff2\001\002\000" +
    "\004\045\341\001\002\000\020\017\270\020\262\021\263" +
    "\022\264\023\266\024\271\025\265\001\002\000\006\042" +
    "\276\046\343\001\002\000\006\042\uffea\050\uffea\001\002" +
    "\000\014\004\022\005\017\006\011\007\020\010\006\001" +
    "\002\000\004\002\000\001\002\000\006\042\ufff8\046\ufff8" +
    "\001\002\000\006\042\ufff7\046\ufff7\001\002\000\006\042" +
    "\ufff6\046\ufff6\001\002\000\006\042\ufff5\046\ufff5\001\002" +
    "\000\006\042\ufff4\046\ufff4\001\002\000\004\047\354\001" +
    "\002\000\006\045\261\050\355\001\002\000\006\042\uffef" +
    "\046\uffef\001\002\000\006\042\340\050\357\001\002\000" +
    "\006\042\ufff0\046\ufff0\001\002\000\004\002\001\001\002" +
    "\000\004\047\362\001\002\000\006\045\365\050\364\001" +
    "\002\000\006\042\u011e\050\u011d\001\002\000\010\002\uffec" +
    "\042\uffec\046\uffec\001\002\000\016\015\370\020\366\021" +
    "\367\031\371\032\374\033\372\001\002\000\004\041\u011b" +
    "\001\002\000\004\041\u0119\001\002\000\004\041\u0117\001" +
    "\002\000\004\041\u0115\001\002\000\004\041\u0113\001\002" +
    "\000\006\042\377\046\u0100\001\002\000\004\041\375\001" +
    "\002\000\004\051\376\001\002\000\006\042\uffc7\046\uffc7" +
    "\001\002\000\016\015\u0103\020\u0101\021\u0102\031\u0104\032" +
    "\u0106\033\u0105\001\002\000\006\042\uffca\050\uffca\001\002" +
    "\000\004\041\u0111\001\002\000\004\041\u010f\001\002\000" +
    "\004\041\u010d\001\002\000\004\041\u010b\001\002\000\004" +
    "\041\u0109\001\002\000\004\041\u0107\001\002\000\004\051" +
    "\u0108\001\002\000\006\042\uffc1\046\uffc1\001\002\000\006" +
    "\051\077\052\076\001\002\000\006\042\uffc0\046\uffc0\001" +
    "\002\000\004\051\u010c\001\002\000\006\042\uffc2\046\uffc2" +
    "\001\002\000\004\053\u010e\001\002\000\006\042\uffbd\046" +
    "\uffbd\001\002\000\004\054\u0110\001\002\000\006\042\uffbf" +
    "\046\uffbf\001\002\000\004\053\u0112\001\002\000\006\042" +
    "\uffbe\046\uffbe\001\002\000\006\051\077\052\076\001\002" +
    "\000\006\042\uffc6\046\uffc6\001\002\000\004\051\u0116\001" +
    "\002\000\006\042\uffc8\046\uffc8\001\002\000\004\053\u0118" +
    "\001\002\000\006\042\uffc3\046\uffc3\001\002\000\004\054" +
    "\u011a\001\002\000\006\042\uffc5\046\uffc5\001\002\000\004" +
    "\053\u011c\001\002\000\006\042\uffc4\046\uffc4\001\002\000" +
    "\010\002\uffed\042\uffed\046\uffed\001\002\000\004\045\u011f" +
    "\001\002\000\016\015\370\020\366\021\367\031\371\032" +
    "\374\033\372\001\002\000\006\042\377\046\u0121\001\002" +
    "\000\006\042\uffc9\050\uffc9\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\006\002\006\010\003\001\001\000\002\001" +
    "\001\000\006\002\u0121\010\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\011\004\013\005\012\006" +
    "\014\007\015\010\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\116" +
    "\001\001\000\002\001\001\000\004\013\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\135\001\001\000\002\001\001\000\004\015\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\212\001\001\000\002\001\001\000\004\017" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\345\005\346" +
    "\006\347\007\350\010\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxGuardarPartida$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxGuardarPartida$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxGuardarPartida$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ManejadorSintactico manejadorSintactico;
    private ManejadorOnline manejadorOnline;
    private final ManejadorGUI manejadorGUI = new ManejadorGUI();
    private JFrame framePrincipal;
    private JPanel panelPrincipal;
    private JPanel panelContenedor;
    private JScrollPane scrollPane;
    private Principal principal;
    private boolean editar;
    private boolean replay;
    private String path;
    private DialogoErrores errores;

    public SintaxGuardarPartida(LexerGuardarPartida lexer, JFrame framePrincipal, JPanel panelPricipal, JScrollPane scrollPane, Principal principal, boolean editar, String path, boolean replay, DialogoErrores errores) { 
        super(lexer);   
        this.manejadorSintactico = new ManejadorSintactico();
        this.principal = principal;
        this.framePrincipal = framePrincipal;
        this.panelPrincipal = panelPricipal;
        this.scrollPane = scrollPane;
        this.editar = editar;
        this.path = path;
        this.replay = replay;
        this.errores = errores;
        this.manejadorSintactico.setErrores(this.errores);
        this.manejadorOnline = new ManejadorOnline();
    }

    public ManejadorSintactico getManejadorSintactico() {
        return this.manejadorSintactico;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            errores.agregarErroresTXTSintaxis(
            (("Error Sintaxis Linea #: " + (s.right + 1) 
            + " Columna # " + (s.left + 1) 
            + " Token NO Reconocido: -> " + (s.value) + "\n" )));
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxGuardarPartida$actions {
  private final SintaxGuardarPartida parser;

  /** Constructor */
  CUP$SintaxGuardarPartida$actions(SintaxGuardarPartida parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxGuardarPartida$do_action_part00000000(
    int                        CUP$SintaxGuardarPartida$act_num,
    java_cup.runtime.lr_parser CUP$SintaxGuardarPartida$parser,
    java.util.Stack            CUP$SintaxGuardarPartida$stack,
    int                        CUP$SintaxGuardarPartida$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxGuardarPartida$result;

      /* select the action based on the action number */
      switch (CUP$SintaxGuardarPartida$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = start_val;
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxGuardarPartida$parser.done_parsing();
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= CorcheteA declaracion_estructura_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		
        if (manejadorSintactico.comprobarStructCargar(e, eleft, eright) != null) {
            manejadorGUI.construirCargarPartida((EstructuraKonquest)e, panelPrincipal, framePrincipal, scrollPane, principal, replay);
            System.out.println("\nAceptado");
        } else {
            System.out.println("\nNo Aceptado");
        };
    
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error inicio 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= estructura_ataques 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		
        if(e != null) {
            manejadorOnline.agregarAtaques(principal, ((List<Ataque>)e));
            System.out.println("Aceptado");
        };
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_estructura_mapa ::= estructura_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoKonquest(e, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_estructura_mapa ::= estructura_planetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoKonquest(e, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_estructura_mapa ::= estructura_planetas_neutrales 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoKonquest(e, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion_estructura_mapa ::= estructura_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoKonquest(e, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_estructura_mapa ::= estructura_ataques 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoKonquest(e, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_estructura_mapa ::= declaracion_estructura_mapa Coma estructura_mapa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosEstructura(a, e, eleft, eright, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_estructura_mapa ::= declaracion_estructura_mapa Coma estructura_planetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosEstructura(a, e, eleft, eright, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_estructura_mapa ::= declaracion_estructura_mapa Coma estructura_planetas_neutrales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosEstructura(a, e, eleft, eright, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_estructura_mapa ::= declaracion_estructura_mapa Coma estructura_jugadores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosEstructura(a, e, eleft, eright, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_estructura_mapa ::= declaracion_estructura_mapa Coma estructura_ataques 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosEstructura(a, e, eleft, eright, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructura_mapa ::= Mapa DosPuntos CorcheteA struct_map CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.comprobarLosAtributosMapa(e, eleft, eright);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_mapa",2, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_planetas ::= Planetas DosPuntos LlaveA struct_planetas LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.listaPlanetasKonquest(e);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_planetas",3, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura_planetas ::= Planetas DosPuntos LlaveA LlaveC 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_planetas",3, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura_planetas_neutrales ::= PlanetasNeutrales DosPuntos LlaveA struct_planetas LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.listaPlanetasKonquest(e);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_planetas_neutrales",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura_planetas_neutrales ::= PlanetasNeutrales DosPuntos LlaveA LlaveC 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_planetas_neutrales",4, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura_jugadores ::= Jugadores DosPuntos LlaveA struct_jugadores LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.listaJugadoresKonquest(e);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_jugadores",5, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura_ataques ::= Ataques DosPuntos LlaveA struct_ataques LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.listaAtaqueKonquest(e);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_ataques",6, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estructura_ataques ::= Ataques DosPuntos LlaveA LlaveC 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_ataques",6, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struct_planetas ::= CorcheteA declaracion_estructura_planetas CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.comprobarPlanetas(e, eleft, eright);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_planetas",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_planetas ::= struct_planetas Coma CorcheteA declaracion_estructura_planetas CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.listadoPlanetas(a, e, eleft, eright);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_planetas",7, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_estructura_planetas ::= Nombre DosPuntos NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoPlanetas(e, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_estructura_planetas ::= Naves DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoPlanetas(e, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_estructura_planetas ::= Produccion DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoPlanetas(e, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_estructura_planetas ::= PorcentajeMuertes DosPuntos Decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoPlanetas(e, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_estructura_planetas ::= Fila DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoPlanetas(e, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_estructura_planetas ::= Columna DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoPlanetas(e, 6);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_estructura_planetas ::= CantidadProducida DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoPlanetas(e, 7);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_estructura_planetas ::= declaracion_estructura_planetas Coma Nombre DosPuntos NombrePlanetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosPlanetas(a, e, eleft, eright, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_estructura_planetas ::= declaracion_estructura_planetas Coma Naves DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosPlanetas(a, e, eleft, eright, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_estructura_planetas ::= declaracion_estructura_planetas Coma Produccion DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosPlanetas(a, e, eleft, eright, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_estructura_planetas ::= declaracion_estructura_planetas Coma PorcentajeMuertes DosPuntos Decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosPlanetas(a, e, eleft, eright, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_estructura_planetas ::= declaracion_estructura_planetas Coma Fila DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosPlanetas(a, e, eleft, eright, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_estructura_planetas ::= declaracion_estructura_planetas Coma Columna DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosPlanetas(a, e, eleft, eright, 6);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_estructura_planetas ::= declaracion_estructura_planetas Coma CantidadProducida DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosPlanetas(a, e, eleft, eright, 7);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",8, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // produccion_booleana ::= True 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_booleana",9, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // produccion_booleana ::= False 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_booleana",9, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_jugadores ::= CorcheteA produccion_jugadores CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.comprobarJugadores(e, eleft, eright);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_jugadores",10, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struct_jugadores ::= struct_jugadores Coma CorcheteA produccion_jugadores CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.listadoJugadores(a, e, eleft, eright);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_jugadores",10, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // produccion_nombres ::= NombreJugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_nombres",12, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // produccion_nombres ::= NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_nombres",12, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // produccion_jugadores ::= Nombre DosPuntos produccion_nombres Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Tipo DosPuntos produccion_tipo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // produccion_jugadores ::= Nombre DosPuntos produccion_nombres Coma Tipo DosPuntos produccion_tipo Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // produccion_jugadores ::= Tipo DosPuntos produccion_tipo Coma Nombre DosPuntos produccion_nombres Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // produccion_jugadores ::= Tipo DosPuntos produccion_tipo Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Nombre DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // produccion_jugadores ::= PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Tipo DosPuntos produccion_tipo Coma Nombre DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // produccion_jugadores ::= PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Nombre DosPuntos produccion_nombres Coma Tipo DosPuntos produccion_tipo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",11, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // produccion_tipo ::= Humano 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = e.toString();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_tipo",13, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // produccion_tipo ::= Dificil 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = e.toString();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_tipo",13, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // produccion_tipo ::= Facil 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = e.toString();
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_tipo",13, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // produccion_planetas_jugadores ::= NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_planetas_jugadores",14, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // produccion_planetas_jugadores ::= produccion_planetas_jugadores Coma NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.listadoPlanetasJugador(e, a);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_planetas_jugadores",14, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_ataques ::= CorcheteA produccion_ataques CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.comprobarLosAtributosAtaque(e, eleft, eright);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_ataques",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struct_ataques ::= struct_ataques Coma CorcheteA produccion_ataques CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.listadoAtaques(a, e, eleft, eright);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_ataques",15, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // produccion_ataques ::= PlanetaDestino DosPuntos NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoAtaques(e, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // produccion_ataques ::= PlanetaOrigen DosPuntos NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoAtaques(e, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // produccion_ataques ::= Jugador DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoAtaques(e, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // produccion_ataques ::= PorcentajeMuertes DosPuntos Decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoAtaques(e, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // produccion_ataques ::= Naves DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoAtaques(e, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // produccion_ataques ::= Turno DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoAtaques(e, 6);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // produccion_ataques ::= produccion_ataques Coma PlanetaDestino DosPuntos NombrePlanetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosAtaque(a, e, eleft, eright, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // produccion_ataques ::= produccion_ataques Coma PlanetaOrigen DosPuntos NombrePlanetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosAtaque(a, e, eleft, eright, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // produccion_ataques ::= produccion_ataques Coma Jugador DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosAtaque(a, e, eleft, eright, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // produccion_ataques ::= produccion_ataques Coma PorcentajeMuertes DosPuntos Decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosAtaque(a, e, eleft, eright, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // produccion_ataques ::= produccion_ataques Coma Naves DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosAtaque(a, e, eleft, eright, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // produccion_ataques ::= produccion_ataques Coma Turno DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosAtaque(a, e, eleft, eright, 6);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("produccion_ataques",16, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructura_tamaño_mapa ::= Filas DosPuntos Numero Coma Columnas DosPuntos Numero 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarTamaño(f, c);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_tamaño_mapa",18, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructura_tamaño_mapa ::= Columnas DosPuntos Numero Coma Filas DosPuntos Numero 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarTamaño(f, c);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("estructura_tamaño_mapa",18, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_map ::= Tamaño DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.agregarUnAtributoMapa(e, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struct_map ::= TamañoS DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.agregarUnAtributoMapa(e, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struct_map ::= MapaCiego DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoMapa(e, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_map ::= Finalizacion DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoMapa(e, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struct_map ::= CantidadPlanetas DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoMapa(e, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struct_map ::= Turno DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoMapa(e, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // struct_map ::= Jugador DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributoMapa(e, 6);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // struct_map ::= struct_map Coma Tamaño DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.agregarObjetosMapaPartida(a, e, eleft, eright, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // struct_map ::= struct_map Coma TamañoS DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-1)).value;
		RESULT = manejadorSintactico.agregarObjetosMapaPartida(a, e, eleft, eright, 1);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // struct_map ::= struct_map Coma MapaCiego DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapaPartida(a, e, eleft, eright, 2);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struct_map ::= struct_map Coma Finalizacion DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapaPartida(a, e, eleft, eright, 3);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struct_map ::= struct_map Coma CantidadPlanetas DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapaPartida(a, e, eleft, eright, 4);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // struct_map ::= struct_map Coma Turno DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapaPartida(a, e, eleft, eright, 5);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struct_map ::= struct_map Coma Jugador DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxGuardarPartida$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapaPartida(a, e, eleft, eright, 6);
              CUP$SintaxGuardarPartida$result = parser.getSymbolFactory().newSymbol("struct_map",17, ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.elementAt(CUP$SintaxGuardarPartida$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxGuardarPartida$stack.peek()), RESULT);
            }
          return CUP$SintaxGuardarPartida$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxGuardarPartida$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxGuardarPartida$do_action(
    int                        CUP$SintaxGuardarPartida$act_num,
    java_cup.runtime.lr_parser CUP$SintaxGuardarPartida$parser,
    java.util.Stack            CUP$SintaxGuardarPartida$stack,
    int                        CUP$SintaxGuardarPartida$top)
    throws java.lang.Exception
    {
              return CUP$SintaxGuardarPartida$do_action_part00000000(
                               CUP$SintaxGuardarPartida$act_num,
                               CUP$SintaxGuardarPartida$parser,
                               CUP$SintaxGuardarPartida$stack,
                               CUP$SintaxGuardarPartida$top);
    }
}

}
