
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package konquest.backed.analizador;

import java.util.List;
import java.util.ArrayList;
import konquest.backed.manejadores.*;
import java_cup.runtime.*;
import konquest.backed.objetos.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import konquest.gui.*;
import java.awt.event.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\005\000\002\014\005\000" +
    "\002\015\005\000\002\015\005\000\002\016\005\000\002" +
    "\016\005\000\002\017\005\000\002\017\005\000\002\020" +
    "\005\000\002\020\005\000\002\021\005\000\002\021\005" +
    "\000\002\004\007\000\002\005\007\000\002\005\006\000" +
    "\002\006\007\000\002\006\006\000\002\007\007\000\002" +
    "\052\005\000\002\052\007\000\002\055\005\000\002\055" +
    "\007\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\030\005\000\002" +
    "\030\005\000\002\031\005\000\002\031\005\000\002\032" +
    "\005\000\002\032\005\000\002\033\005\000\002\033\005" +
    "\000\002\034\005\000\002\034\005\000\002\035\005\000" +
    "\002\035\005\000\002\036\005\000\002\037\005\000\002" +
    "\040\005\000\002\041\005\000\002\045\003\000\002\045" +
    "\003\000\002\053\005\000\002\053\007\000\002\051\003" +
    "\000\002\051\003\000\002\046\017\000\002\046\017\000" +
    "\002\046\017\000\002\046\017\000\002\046\017\000\002" +
    "\046\017\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\050\003\000\002\050\005\000\002\042\011" +
    "\000\002\042\011\000\002\043\015\000\002\043\015\000" +
    "\002\043\015\000\002\043\015\000\002\043\015\000\002" +
    "\043\015\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\054\007\000\002\054\011\000\002\054\011" +
    "\000\002\054\007\000\002\054\007\000\002\054\007\000" +
    "\002\054\007\000\002\054\011\000\002\054\007\000\002" +
    "\054\005\000\002\054\007\000\002\054\007\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\007\000\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01dc\000\006\003\004\042\006\001\002\000\006\003" +
    "\004\042\006\001\002\000\004\002\u01dd\001\002\000\014" +
    "\003\017\004\020\005\015\006\007\007\016\001\002\000" +
    "\004\036\u01b2\001\002\000\004\043\u01b1\001\002\000\004" +
    "\037\u01a6\001\002\000\004\037\u0195\001\002\000\004\037" +
    "\u017e\001\002\000\004\037\u0161\001\002\000\004\036\365" +
    "\001\002\000\004\036\242\001\002\000\014\003\017\004" +
    "\020\005\015\006\007\007\016\001\002\000\004\036\021" +
    "\001\002\000\004\042\022\001\002\000\024\010\027\011" +
    "\031\012\025\013\024\014\034\015\026\016\030\017\033" +
    "\020\032\001\002\000\006\037\176\043\177\001\002\000" +
    "\004\036\174\001\002\000\004\036\170\001\002\000\004" +
    "\036\166\001\002\000\004\036\161\001\002\000\004\036" +
    "\157\001\002\000\004\036\135\001\002\000\004\036\041" +
    "\001\002\000\004\036\037\001\002\000\004\036\035\001" +
    "\002\000\004\051\036\001\002\000\006\037\uff89\043\uff89" +
    "\001\002\000\004\051\040\001\002\000\006\037\uff85\043" +
    "\uff85\001\002\000\004\042\042\001\002\000\010\021\046" +
    "\022\043\023\045\001\002\000\004\036\114\001\002\000" +
    "\004\043\113\001\002\000\004\036\072\001\002\000\004" +
    "\036\047\001\002\000\006\040\050\041\051\001\002\000" +
    "\006\037\uffb1\043\uffb1\001\002\000\006\037\uffb2\043\uffb2" +
    "\001\002\000\004\037\053\001\002\000\006\022\054\023" +
    "\055\001\002\000\004\036\064\001\002\000\004\036\056" +
    "\001\002\000\004\051\057\001\002\000\004\037\060\001" +
    "\002\000\004\022\061\001\002\000\004\036\062\001\002" +
    "\000\006\040\050\041\051\001\002\000\004\043\uff9e\001" +
    "\002\000\006\040\050\041\051\001\002\000\004\037\066" +
    "\001\002\000\004\023\067\001\002\000\004\036\070\001" +
    "\002\000\004\051\071\001\002\000\004\043\uff9f\001\002" +
    "\000\004\051\073\001\002\000\004\037\074\001\002\000" +
    "\006\021\076\022\075\001\002\000\004\036\105\001\002" +
    "\000\004\036\077\001\002\000\006\040\050\041\051\001" +
    "\002\000\004\037\101\001\002\000\004\022\102\001\002" +
    "\000\004\036\103\001\002\000\006\040\050\041\051\001" +
    "\002\000\004\043\uff9a\001\002\000\006\040\050\041\051" +
    "\001\002\000\004\037\107\001\002\000\004\021\110\001" +
    "\002\000\004\036\111\001\002\000\006\040\050\041\051" +
    "\001\002\000\004\043\uff9b\001\002\000\006\037\uff86\043" +
    "\uff86\001\002\000\006\040\050\041\051\001\002\000\004" +
    "\037\116\001\002\000\006\021\120\023\117\001\002\000" +
    "\004\036\127\001\002\000\004\036\121\001\002\000\006" +
    "\040\050\041\051\001\002\000\004\037\123\001\002\000" +
    "\004\023\124\001\002\000\004\036\125\001\002\000\004" +
    "\051\126\001\002\000\004\043\uff9d\001\002\000\004\051" +
    "\130\001\002\000\004\037\131\001\002\000\004\021\132" +
    "\001\002\000\004\036\133\001\002\000\006\040\050\041" +
    "\051\001\002\000\004\043\uff9c\001\002\000\004\042\136" +
    "\001\002\000\006\031\140\032\141\001\002\000\004\043" +
    "\156\001\002\000\004\036\150\001\002\000\004\036\142" +
    "\001\002\000\004\051\143\001\002\000\004\037\144\001" +
    "\002\000\004\031\145\001\002\000\004\036\146\001\002" +
    "\000\004\051\147\001\002\000\004\043\uffa0\001\002\000" +
    "\004\051\151\001\002\000\004\037\152\001\002\000\004" +
    "\032\153\001\002\000\004\036\154\001\002\000\004\051" +
    "\155\001\002\000\004\043\uffa1\001\002\000\006\037\uff8b" +
    "\043\uff8b\001\002\000\006\040\050\041\051\001\002\000" +
    "\006\037\uff87\043\uff87\001\002\000\010\046\164\047\165" +
    "\050\163\001\002\000\006\037\uff8d\043\uff8d\001\002\000" +
    "\006\037\uff97\043\uff97\001\002\000\006\037\uff98\043\uff98" +
    "\001\002\000\006\037\uff99\043\uff99\001\002\000\006\040" +
    "\050\041\051\001\002\000\006\037\uff88\043\uff88\001\002" +
    "\000\004\042\171\001\002\000\006\031\140\032\141\001" +
    "\002\000\004\043\173\001\002\000\006\037\uff8c\043\uff8c" +
    "\001\002\000\006\040\050\041\051\001\002\000\006\037" +
    "\uff8a\043\uff8a\001\002\000\024\010\203\011\205\012\201" +
    "\013\200\014\210\015\202\016\204\017\207\020\206\001" +
    "\002\000\006\037\uffe1\043\uffe1\001\002\000\004\036\237" +
    "\001\002\000\004\036\233\001\002\000\004\036\231\001" +
    "\002\000\004\036\227\001\002\000\004\036\225\001\002" +
    "\000\004\036\221\001\002\000\004\036\215\001\002\000" +
    "\004\036\213\001\002\000\004\036\211\001\002\000\004" +
    "\051\212\001\002\000\006\037\uff92\043\uff92\001\002\000" +
    "\004\051\214\001\002\000\006\037\uff8e\043\uff8e\001\002" +
    "\000\004\042\216\001\002\000\010\021\046\022\043\023" +
    "\045\001\002\000\004\043\220\001\002\000\006\037\uff8f" +
    "\043\uff8f\001\002\000\004\042\222\001\002\000\006\031" +
    "\140\032\141\001\002\000\004\043\224\001\002\000\006" +
    "\037\uff94\043\uff94\001\002\000\006\040\050\041\051\001" +
    "\002\000\006\037\uff90\043\uff90\001\002\000\010\046\164" +
    "\047\165\050\163\001\002\000\006\037\uff96\043\uff96\001" +
    "\002\000\006\040\050\041\051\001\002\000\006\037\uff91" +
    "\043\uff91\001\002\000\004\042\234\001\002\000\006\031" +
    "\140\032\141\001\002\000\004\043\236\001\002\000\006" +
    "\037\uff95\043\uff95\001\002\000\006\040\050\041\051\001" +
    "\002\000\006\037\uff93\043\uff93\001\002\000\004\043\ufffa" +
    "\001\002\000\004\044\243\001\002\000\004\042\245\001" +
    "\002\000\006\037\361\045\360\001\002\000\010\024\251" +
    "\027\250\030\246\001\002\000\004\036\333\001\002\000" +
    "\004\043\332\001\002\000\004\036\307\001\002\000\004" +
    "\036\252\001\002\000\006\046\255\047\254\001\002\000" +
    "\004\037\256\001\002\000\006\037\uffae\043\uffae\001\002" +
    "\000\006\037\uffad\043\uffad\001\002\000\006\027\260\030" +
    "\257\001\002\000\004\036\277\001\002\000\004\036\261" +
    "\001\002\000\004\044\262\001\002\000\004\046\264\001" +
    "\002\000\006\037\266\045\265\001\002\000\006\037\uffa3" +
    "\045\uffa3\001\002\000\004\037\270\001\002\000\004\046" +
    "\267\001\002\000\006\037\uffa2\045\uffa2\001\002\000\004" +
    "\030\271\001\002\000\004\036\272\001\002\000\010\033" +
    "\273\034\274\035\276\001\002\000\006\037\uffa6\043\uffa6" +
    "\001\002\000\006\037\uffa5\043\uffa5\001\002\000\004\043" +
    "\uffac\001\002\000\006\037\uffa4\043\uffa4\001\002\000\010" +
    "\033\273\034\274\035\276\001\002\000\004\037\301\001" +
    "\002\000\004\027\302\001\002\000\004\036\303\001\002" +
    "\000\004\044\304\001\002\000\004\046\264\001\002\000" +
    "\006\037\266\045\306\001\002\000\004\043\uffab\001\002" +
    "\000\004\044\310\001\002\000\004\046\264\001\002\000" +
    "\006\037\266\045\312\001\002\000\004\037\313\001\002" +
    "\000\006\024\315\030\314\001\002\000\004\036\324\001" +
    "\002\000\004\036\316\001\002\000\006\046\255\047\254" +
    "\001\002\000\004\037\320\001\002\000\004\030\321\001" +
    "\002\000\004\036\322\001\002\000\010\033\273\034\274" +
    "\035\276\001\002\000\004\043\uffa7\001\002\000\010\033" +
    "\273\034\274\035\276\001\002\000\004\037\326\001\002" +
    "\000\004\024\327\001\002\000\004\036\330\001\002\000" +
    "\006\046\255\047\254\001\002\000\004\043\uffa8\001\002" +
    "\000\006\037\uffb0\045\uffb0\001\002\000\010\033\273\034" +
    "\274\035\276\001\002\000\004\037\335\001\002\000\006" +
    "\024\337\027\336\001\002\000\004\036\350\001\002\000" +
    "\004\036\340\001\002\000\006\046\255\047\254\001\002" +
    "\000\004\037\342\001\002\000\004\027\343\001\002\000" +
    "\004\036\344\001\002\000\004\044\345\001\002\000\004" +
    "\046\264\001\002\000\006\037\266\045\347\001\002\000" +
    "\004\043\uffaa\001\002\000\004\044\351\001\002\000\004" +
    "\046\264\001\002\000\006\037\266\045\353\001\002\000" +
    "\004\037\354\001\002\000\004\024\355\001\002\000\004" +
    "\036\356\001\002\000\006\046\255\047\254\001\002\000" +
    "\004\043\uffa9\001\002\000\006\037\uffdc\043\uffdc\001\002" +
    "\000\004\042\362\001\002\000\010\024\251\027\250\030" +
    "\246\001\002\000\004\043\364\001\002\000\006\037\uffaf" +
    "\045\uffaf\001\002\000\004\044\366\001\002\000\006\042" +
    "\371\045\367\001\002\000\006\037\uffdf\043\uffdf\001\002" +
    "\000\006\037\u015d\045\u015c\001\002\000\012\023\375\024" +
    "\372\025\376\026\u0100\001\002\000\004\036\u015a\001\002" +
    "\000\004\037\u014f\001\002\000\004\037\u013e\001\002\000" +
    "\004\036\u013c\001\002\000\004\036\u013a\001\002\000\004" +
    "\043\u0139\001\002\000\004\036\u0137\001\002\000\004\037" +
    "\u0120\001\002\000\004\037\u0103\001\002\000\010\023\375" +
    "\024\372\026\u0100\001\002\000\004\037\u0118\001\002\000" +
    "\004\043\uffd6\001\002\000\004\037\u0110\001\002\000\004" +
    "\037\u0108\001\002\000\006\023\375\024\372\001\002\000" +
    "\004\037\u010e\001\002\000\004\043\uffc9\001\002\000\004" +
    "\037\u010c\001\002\000\004\024\372\001\002\000\004\043" +
    "\uffbf\001\002\000\004\023\375\001\002\000\004\043\uffc0" +
    "\001\002\000\006\024\372\026\u0100\001\002\000\004\037" +
    "\u0116\001\002\000\004\043\uffca\001\002\000\004\037\u0114" +
    "\001\002\000\004\024\372\001\002\000\004\043\uffbd\001" +
    "\002\000\004\026\u0100\001\002\000\004\043\uffbe\001\002" +
    "\000\006\023\375\026\u0100\001\002\000\004\043\uffcb\001" +
    "\002\000\004\037\u011e\001\002\000\004\037\u011c\001\002" +
    "\000\004\023\375\001\002\000\004\043\uffb8\001\002\000" +
    "\004\026\u0100\001\002\000\004\043\uffb7\001\002\000\010" +
    "\023\375\024\372\025\376\001\002\000\004\037\u012f\001" +
    "\002\000\004\043\uffd4\001\002\000\004\037\u0127\001\002" +
    "\000\004\037\u0125\001\002\000\006\023\375\024\372\001" +
    "\002\000\004\043\uffc4\001\002\000\006\024\372\025\376" +
    "\001\002\000\004\037\u012d\001\002\000\004\043\uffc3\001" +
    "\002\000\004\037\u012b\001\002\000\004\024\372\001\002" +
    "\000\004\043\uffc1\001\002\000\004\025\376\001\002\000" +
    "\004\043\uffc2\001\002\000\006\023\375\025\376\001\002" +
    "\000\004\037\u0135\001\002\000\004\043\uffc5\001\002\000" +
    "\004\037\u0133\001\002\000\004\023\375\001\002\000\004" +
    "\043\uffbb\001\002\000\004\025\376\001\002\000\004\043" +
    "\uffbc\001\002\000\004\052\u0138\001\002\000\006\037\uffb3" +
    "\043\uffb3\001\002\000\006\037\uffdb\045\uffdb\001\002\000" +
    "\004\051\u013b\001\002\000\006\037\uffb5\043\uffb5\001\002" +
    "\000\004\051\u013d\001\002\000\006\037\uffb4\043\uffb4\001" +
    "\002\000\010\024\372\025\376\026\u0100\001\002\000\004" +
    "\043\uffd5\001\002\000\004\037\u0147\001\002\000\004\037" +
    "\u0145\001\002\000\004\037\u0143\001\002\000\006\024\372" +
    "\025\376\001\002\000\004\043\uffc6\001\002\000\006\024" +
    "\372\026\u0100\001\002\000\004\043\uffc7\001\002\000\006" +
    "\025\376\026\u0100\001\002\000\004\043\uffc8\001\002\000" +
    "\004\037\u014d\001\002\000\004\037\u014b\001\002\000\004" +
    "\025\376\001\002\000\004\043\uffb9\001\002\000\004\026" +
    "\u0100\001\002\000\004\043\uffba\001\002\000\010\023\375" +
    "\025\376\026\u0100\001\002\000\004\037\u0158\001\002\000" +
    "\004\043\uffd7\001\002\000\004\037\u0156\001\002\000\004" +
    "\037\u0154\001\002\000\006\023\375\025\376\001\002\000" +
    "\004\043\uffcc\001\002\000\006\023\375\026\u0100\001\002" +
    "\000\004\043\uffce\001\002\000\006\025\376\026\u0100\001" +
    "\002\000\004\043\uffcd\001\002\000\004\046\u015b\001\002" +
    "\000\006\037\uffb6\043\uffb6\001\002\000\006\037\uffe0\043" +
    "\uffe0\001\002\000\004\042\u015e\001\002\000\012\023\375" +
    "\024\372\025\376\026\u0100\001\002\000\004\043\u0160\001" +
    "\002\000\006\037\uffda\045\uffda\001\002\000\010\004\020" +
    "\005\015\006\007\001\002\000\004\043\ufffb\001\002\000" +
    "\004\037\u0176\001\002\000\004\037\u016e\001\002\000\004" +
    "\037\u0166\001\002\000\006\004\020\006\007\001\002\000" +
    "\004\037\u016c\001\002\000\004\037\u016a\001\002\000\004" +
    "\043\uffef\001\002\000\004\006\007\001\002\000\004\043" +
    "\uffe4\001\002\000\004\004\020\001\002\000\004\043\uffe5" +
    "\001\002\000\006\005\015\006\007\001\002\000\004\037" +
    "\u0174\001\002\000\004\037\u0172\001\002\000\004\043\ufff0" +
    "\001\002\000\004\006\007\001\002\000\004\043\uffe8\001" +
    "\002\000\004\005\015\001\002\000\004\043\uffe9\001\002" +
    "\000\006\004\020\005\015\001\002\000\004\043\uffee\001" +
    "\002\000\004\037\u017c\001\002\000\004\037\u017a\001\002" +
    "\000\004\004\020\001\002\000\004\043\uffe3\001\002\000" +
    "\004\005\015\001\002\000\004\043\uffe2\001\002\000\010" +
    "\004\020\005\015\007\016\001\002\000\004\037\u018d\001" +
    "\002\000\004\037\u0185\001\002\000\004\037\u0183\001\002" +
    "\000\004\043\ufffc\001\002\000\006\004\020\005\015\001" +
    "\002\000\004\043\ufff1\001\002\000\006\004\020\007\016" +
    "\001\002\000\004\037\u018b\001\002\000\004\043\ufff2\001" +
    "\002\000\004\037\u0189\001\002\000\004\004\020\001\002" +
    "\000\004\043\uffe6\001\002\000\004\007\016\001\002\000" +
    "\004\043\uffe7\001\002\000\006\005\015\007\016\001\002" +
    "\000\004\037\u0193\001\002\000\004\043\ufff3\001\002\000" +
    "\004\037\u0191\001\002\000\004\005\015\001\002\000\004" +
    "\043\uffea\001\002\000\004\007\016\001\002\000\004\043" +
    "\uffeb\001\002\000\010\004\020\006\007\007\016\001\002" +
    "\000\004\037\u019e\001\002\000\004\037\u019c\001\002\000" +
    "\004\043\ufffd\001\002\000\004\037\u019a\001\002\000\006" +
    "\004\020\006\007\001\002\000\004\043\ufff4\001\002\000" +
    "\006\004\020\007\016\001\002\000\004\043\ufff5\001\002" +
    "\000\006\006\007\007\016\001\002\000\004\037\u01a4\001" +
    "\002\000\004\043\ufff6\001\002\000\004\037\u01a2\001\002" +
    "\000\004\006\007\001\002\000\004\043\uffec\001\002\000" +
    "\004\007\016\001\002\000\004\043\uffed\001\002\000\010" +
    "\005\015\006\007\007\016\001\002\000\004\037\u01af\001" +
    "\002\000\004\037\u01ad\001\002\000\004\043\ufffe\001\002" +
    "\000\004\037\u01ab\001\002\000\006\005\015\006\007\001" +
    "\002\000\004\043\ufff7\001\002\000\006\006\007\007\016" +
    "\001\002\000\004\043\ufff9\001\002\000\006\005\015\007" +
    "\016\001\002\000\004\043\ufff8\001\002\000\004\002\000" +
    "\001\002\000\004\044\u01b3\001\002\000\006\042\u01b6\045" +
    "\u01b4\001\002\000\006\037\uffdd\043\uffdd\001\002\000\006" +
    "\037\u01d9\045\u01d8\001\002\000\012\023\375\024\372\025" +
    "\376\026\u0100\001\002\000\004\043\uffcf\001\002\000\004" +
    "\037\u01d0\001\002\000\004\037\u01ce\001\002\000\004\043" +
    "\u01cd\001\002\000\004\037\u01c5\001\002\000\004\037\u01bd" +
    "\001\002\000\010\023\375\024\372\026\u0100\001\002\000" +
    "\004\037\u01c3\001\002\000\004\043\uffd2\001\002\000\004" +
    "\037\u01c1\001\002\000\006\023\375\024\372\001\002\000" +
    "\006\037\u010e\043\uffbd\001\002\000\006\023\375\026\u0100" +
    "\001\002\000\006\037\u011c\043\uffbe\001\002\000\010\023" +
    "\375\024\372\025\376\001\002\000\004\037\u01cb\001\002" +
    "\000\004\043\uffd0\001\002\000\004\037\u01c9\001\002\000" +
    "\006\023\375\024\372\001\002\000\006\037\u010e\043\uffc1" +
    "\001\002\000\006\023\375\025\376\001\002\000\006\037" +
    "\u0133\043\uffc2\001\002\000\006\037\uffd9\045\uffd9\001\002" +
    "\000\010\024\372\025\376\026\u0100\001\002\000\004\043" +
    "\uffd1\001\002\000\010\023\375\025\376\026\u0100\001\002" +
    "\000\004\043\uffd3\001\002\000\004\037\u01d6\001\002\000" +
    "\004\037\u01d4\001\002\000\006\023\375\025\376\001\002" +
    "\000\006\037\u0133\043\uffb9\001\002\000\006\023\375\026" +
    "\u0100\001\002\000\006\037\u011c\043\uffba\001\002\000\006" +
    "\037\uffde\043\uffde\001\002\000\004\042\u01da\001\002\000" +
    "\012\023\375\024\372\025\376\026\u0100\001\002\000\004" +
    "\043\u01dc\001\002\000\006\037\uffd8\045\uffd8\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01dc\000\004\002\004\001\001\000\004\002\u01dd\001" +
    "\001\000\002\001\001\000\014\003\007\004\010\005\011" +
    "\006\012\007\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\240\004\010\005\011\006\012\007\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\062\001\001\000\002\001\001\000\004\045\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\103\001" +
    "\001\000\002\001\001\000\004\045\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\157\001\001\000\002\001\001" +
    "\000\004\044\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\225\001\001\000\002\001\001\000\004\044" +
    "\227\001\001\000\002\001\001\000\004\045\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\243\001\001\000\002\001\001\000\004" +
    "\046\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\322\001\001\000\002\001\001\000\004\047\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\362\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\376\036\372\037" +
    "\u0101\040\373\041\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\u0104\036\u0103\040\u0105\041" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\u0109\036\u0108\040" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\u010c\001\001\000\002\001\001\000" +
    "\004\040\u010e\001\001\000\002\001\001\000\010\032\u0111" +
    "\036\u0110\041\u0112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\u0114\001\001\000\002" +
    "\001\001\000\004\041\u0116\001\001\000\002\001\001\000" +
    "\010\035\u0118\040\u0119\041\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u011c\001" +
    "\001\000\002\001\001\000\004\041\u011e\001\001\000\002" +
    "\001\001\000\012\027\u0121\036\u0120\037\u0123\040\u0122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\u0125\036\u0108\040\u010a\001" +
    "\001\000\002\001\001\000\010\030\u0128\036\u0127\037\u0129" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u012b\001\001\000\002\001\001\000\004" +
    "\037\u012d\001\001\000\002\001\001\000\010\033\u0130\037" +
    "\u0131\040\u012f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u0133\001\001\000\002\001" +
    "\001\000\004\037\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u013e\036\u013f\037\u0140\041\u0141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\u0143\036\u0127\037\u0129\001\001\000" +
    "\002\001\001\000\010\032\u0145\036\u0110\041\u0112\001\001" +
    "\000\002\001\001\000\010\034\u0147\037\u0148\041\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u014b\001\001\000\002\001\001\000\004\041" +
    "\u014d\001\001\000\002\001\001\000\012\024\u0150\037\u0151" +
    "\040\u014f\041\u0152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\u0154" +
    "\037\u0131\040\u012f\001\001\000\002\001\001\000\010\035" +
    "\u0156\040\u0119\041\u011a\001\001\000\002\001\001\000\010" +
    "\034\u0158\037\u0148\041\u0149\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\u015e\036\372\037\u0101\040\373\041" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\u0163\005\u0164\006\u0162\013\u0161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\u0167\006\u0166\020\u0168\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u016a" +
    "\001\001\000\002\001\001\000\004\004\u016c\001\001\000" +
    "\002\001\001\000\010\005\u016f\006\u016e\016\u0170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0172\001\001\000\002\001\001\000\004\005\u0174" +
    "\001\001\000\002\001\001\000\010\004\u0177\005\u0178\021" +
    "\u0176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u017a\001\001\000\002\001\001\000" +
    "\004\005\u017c\001\001\000\002\001\001\000\012\004\u017e" +
    "\005\u017f\007\u0180\011\u0181\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\u0177\005\u0178\021\u0183\001\001\000\002\001\001\000" +
    "\010\004\u0185\007\u0187\017\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0189\001" +
    "\001\000\002\001\001\000\004\007\u018b\001\001\000\002" +
    "\001\001\000\010\005\u018d\007\u018f\015\u018e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0191\001\001\000\002\001\001\000\004\007\u0193\001" +
    "\001\000\002\001\001\000\012\004\u0195\006\u0196\007\u0198" +
    "\010\u0197\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\u0167\006\u0166" +
    "\020\u019a\001\001\000\002\001\001\000\010\004\u0185\007" +
    "\u0187\017\u019c\001\001\000\002\001\001\000\010\006\u019e" +
    "\007\u01a0\014\u019f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u01a2\001\001\000\002" +
    "\001\001\000\004\007\u01a4\001\001\000\002\001\001\000" +
    "\012\005\u01a7\006\u01a6\007\u01a9\012\u01a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u016f\006\u016e\016\u01ab\001\001\000\002" +
    "\001\001\000\010\006\u019e\007\u01a0\014\u01ad\001\001\000" +
    "\002\001\001\000\010\005\u018d\007\u018f\015\u01af\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u01b4\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\u01b9\026\u01b6\036\u01b7\037\u01bb\040\u01b8\041" +
    "\u01ba\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\u01be\032\u0145\036\u01bd\040\u0105\041\u01bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\u0109\036\u01c1\040\u010a\001\001\000\002" +
    "\001\001\000\010\035\u0118\040\u0119\041\u01c3\001\001\000" +
    "\002\001\001\000\014\027\u01c6\030\u0143\036\u01c5\037\u01c7" +
    "\040\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\u0125\036\u01c9\040\u010a\001\001" +
    "\000\002\001\001\000\010\033\u0130\037\u01cb\040\u012f\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\u01ce" +
    "\036\u013f\037\u0140\041\u0141\001\001\000\002\001\001\000" +
    "\014\024\u01d0\034\u0147\037\u01d1\040\u014f\041\u01d2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\u0154\037\u01d4\040\u012f\001\001\000\002\001\001" +
    "\000\010\035\u0156\040\u0119\041\u01d6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\u01da" +
    "\026\u01b6\036\u01b7\037\u01bb\040\u01b8\041\u01ba\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ManejadorSintactico manejadorSintactico;
    private final ManejadorGUI manejadorGUI = new ManejadorGUI();
    private JFrame framePrincipal;
    private JPanel panelPrincipal;
    private JPanel panelContenedor;
    private JScrollPane scrollPane;
    private Principal principal;
    private boolean editar;
    private String path;
    private DialogoErrores errores;

    public Sintax(Lexico lexer, JFrame framePrincipal, JPanel panelPricipal, JScrollPane scrollPane, 
        Principal principal, boolean editar, String path, DialogoErrores errores) { 
        super(lexer);   
        this.manejadorSintactico = new ManejadorSintactico();
        this.principal = principal;
        this.framePrincipal = framePrincipal;
        this.panelPrincipal = panelPricipal;
        this.scrollPane = scrollPane;
        this.editar = editar;
        this.path = path;
        this.errores = errores;
        this.manejadorSintactico.setErrores(this.errores);
    }

    public ManejadorSintactico getManejadorSintactico() {
        return this.manejadorSintactico;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            errores.agregarErroresTXTSintaxis(
            (("Error Sintaxis Linea #: " + (s.right + 1) 
            + " Columna # " + (s.left + 1) 
            + " Token NO Reconocido: -> " + (s.value) + "\n" )));
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= CorcheteA declaracion_estructura_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        if (manejadorSintactico.comprobarStruct(e, eleft, eright) != null) {
            if (editar) {
                manejadorGUI.construirDialogoEditar((EstructuraKonquest)e, framePrincipal, path); 
            } else {   
                manejadorGUI.construir((EstructuraKonquest)e, panelPrincipal, framePrincipal, scrollPane, principal);
            }
            System.out.println("\nAceptado");
        } else {
            System.out.println("\nNo Aceptado");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error inicio 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracion_estructura_mapa ::= estructura_mapa Coma declaracion_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_estructura_mapa ::= estructura_planetas Coma declaracion_planetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_estructura_mapa ::= estructura_planetas_neutrales Coma declaracion_neutrales 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_estructura_mapa ::= estructura_jugadores Coma declaracion_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion_estructura_mapa ::= error declaracion_estructura_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		parser.syntax_error((Symbol) e); RESULT = (EstructuraKonquest)a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_mapa",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_mapa ::= estructura_planetas Coma declaracion_planetas_neutrales_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_mapa",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_mapa ::= estructura_planetas_neutrales Coma declaracion_planetas_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_mapa",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_mapa ::= estructura_jugadores Coma declaracion_planetas_neutrales_planetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_mapa",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_planetas ::= estructura_mapa Coma declaracion_planetas_neutrales_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_planetas ::= estructura_planetas_neutrales Coma declaracion_mapa_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_planetas ::= estructura_jugadores Coma declaracion_planetas_neutrales_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_neutrales ::= estructura_mapa Coma declaracion_planetas_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_neutrales",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_neutrales ::= estructura_planetas Coma declaracion_mapa_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_neutrales",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_neutrales ::= estructura_jugadores Coma declaracion_planetas_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_neutrales",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_jugadores ::= estructura_mapa Coma declaracion_planetas_neutrales_planetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_jugadores",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_jugadores ::= estructura_planetas Coma declaracion_planetas_neutrales_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_jugadores",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_jugadores ::= estructura_planetas_neutrales Coma declaracion_planetas_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosKonquest(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_jugadores",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_planetas_neutrales_jugadores ::= estructura_planetas_neutrales Coma estructura_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_neutrales_jugadores",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_planetas_neutrales_jugadores ::= estructura_jugadores Coma estructura_planetas_neutrales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_neutrales_jugadores",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_planetas_jugadores ::= estructura_planetas Coma estructura_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_jugadores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_planetas_jugadores ::= estructura_jugadores Coma estructura_planetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_jugadores",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_planetas_neutrales_planetas ::= estructura_planetas_neutrales Coma estructura_planetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_neutrales_planetas",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_planetas_neutrales_planetas ::= estructura_planetas Coma estructura_planetas_neutrales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_neutrales_planetas",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_mapa_jugadores ::= estructura_mapa Coma estructura_jugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_mapa_jugadores",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_mapa_jugadores ::= estructura_jugadores Coma estructura_mapa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_mapa_jugadores",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_planetas_neutrales_mapa ::= estructura_planetas_neutrales Coma estructura_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 5);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_neutrales_mapa",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_planetas_neutrales_mapa ::= estructura_mapa Coma estructura_planetas_neutrales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 5);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_neutrales_mapa",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_planetas_mapa ::= estructura_planetas Coma estructura_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 6);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_mapa",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_planetas_mapa ::= estructura_mapa Coma estructura_planetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributosKonquest(e, a, 6);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_planetas_mapa",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estructura_mapa ::= Mapa DosPuntos CorcheteA struct_map CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		Mapa mapa = new Mapa((AtributtosMapa)e); RESULT = manejadorSintactico.mapaComprobar(mapa, eleft, eright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_mapa",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estructura_planetas ::= Planetas DosPuntos LlaveA struct_planetas LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = manejadorSintactico.listaPlanetasKonquest(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_planetas",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estructura_planetas ::= Planetas DosPuntos LlaveA LlaveC 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_planetas",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_planetas_neutrales ::= PlanetasNeutrales DosPuntos LlaveA struct_planetas_neutrales LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = manejadorSintactico.listaPlanetasKonquest(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_planetas_neutrales",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estructura_planetas_neutrales ::= PlanetasNeutrales DosPuntos LlaveA LlaveC 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_planetas_neutrales",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estructura_jugadores ::= Jugadores DosPuntos LlaveA struct_jugadores LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = manejadorSintactico.listaJugadoresKonquest(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_jugadores",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // struct_planetas ::= CorcheteA declaracion_estructura_planetas CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_planetas",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_planetas ::= struct_planetas Coma CorcheteA declaracion_estructura_planetas CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.listadoPlanetasN(e, a);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_planetas",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_planetas_neutrales ::= CorcheteA declaracion_estructura_planetas_neutrales CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = e;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_planetas_neutrales",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struct_planetas_neutrales ::= struct_planetas_neutrales Coma CorcheteA declaracion_estructura_planetas_neutrales CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.listadoPlanetasN(e, a);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_planetas_neutrales",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_estructura_planetas ::= estructura_nombre Coma declaracion_nombre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_estructura_planetas ::= estructura_naves Coma declaracion_naves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_estructura_planetas ::= estructura_produccion Coma declaracion_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_estructura_planetas ::= estructura_porcentaje Coma declaracion_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_estructura_planetas_neutrales ::= estructura_nombre Coma declaracion_nombre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas_neutrales",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_estructura_planetas_neutrales ::= estructura_naves Coma declaracion_naves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas_neutrales",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion_estructura_planetas_neutrales ::= estructura_produccion Coma declaracion_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas_neutrales",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_estructura_planetas_neutrales ::= estructura_porcentaje Coma declaracion_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas_neutrales",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_estructura_planetas_neutrales ::= declaracion_produccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_estructura_planetas_neutrales",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_nombre ::= estructura_naves Coma declaracion_produccion_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_nombre ::= estructura_produccion Coma declaracion_naves_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_nombre ::= estructura_porcentaje Coma declaracion_naves_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_naves ::= estructura_nombre Coma declaracion_produccion_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_naves",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_naves ::= estructura_produccion Coma declaracion_nombre_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_naves",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_naves ::= estructura_porcentaje Coma declaracion_nombre_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_naves",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_produccion ::= estructura_nombre Coma declaracion_naves_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_produccion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion_produccion ::= estructura_naves Coma declaracion_nombre_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_produccion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_produccion ::= estructura_porcentaje Coma declaracion_nombre_naves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_produccion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_porcentaje ::= estructura_nombre Coma declaracion_naves_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_porcentaje",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion_porcentaje ::= estructura_naves Coma declaracion_nombre_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_porcentaje",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion_porcentaje ::= estructura_produccion Coma declaracion_nombre_naves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributos(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_porcentaje",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion_nombre_naves ::= estructura_nombre Coma estructura_naves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre_naves",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion_nombre_naves ::= estructura_naves Coma estructura_nombre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre_naves",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion_nombre_produccion ::= estructura_nombre Coma estructura_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre_produccion",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion_nombre_produccion ::= estructura_produccion Coma estructura_nombre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre_produccion",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion_nombre_porcentaje ::= estructura_nombre Coma estructura_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre_porcentaje",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion_nombre_porcentaje ::= estructura_porcentaje Coma estructura_nombre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_nombre_porcentaje",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion_naves_produccion ::= estructura_produccion Coma estructura_naves 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_naves_produccion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion_naves_produccion ::= estructura_naves Coma estructura_produccion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_naves_produccion",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_naves_porcentaje ::= estructura_naves Coma estructura_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 5);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_naves_porcentaje",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion_naves_porcentaje ::= estructura_porcentaje Coma estructura_naves 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 5);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_naves_porcentaje",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion_produccion_porcentaje ::= estructura_porcentaje Coma estructura_produccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 6);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_produccion_porcentaje",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion_produccion_porcentaje ::= estructura_produccion Coma estructura_porcentaje 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarDosAtributos(e, a, 6);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_produccion_porcentaje",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // estructura_nombre ::= Nombre DosPuntos NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_nombre",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructura_naves ::= Naves DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = Integer.parseInt(e.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_naves",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructura_produccion ::= Produccion DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = Integer.parseInt(e.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_produccion",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructura_porcentaje ::= PorcentajeMuertes DosPuntos Decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = Double.parseDouble(e.toString());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_porcentaje",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // produccion_booleana ::= True 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_booleana",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // produccion_booleana ::= False 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_booleana",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // struct_jugadores ::= CorcheteA produccion_jugadores CorcheteC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_jugadores",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // struct_jugadores ::= struct_jugadores Coma CorcheteA produccion_jugadores CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.listadoJugadores(e, a, aleft, aright);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_jugadores",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // produccion_nombres ::= NombreJugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_nombres",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // produccion_nombres ::= NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_nombres",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // produccion_jugadores ::= Nombre DosPuntos produccion_nombres Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Tipo DosPuntos produccion_tipo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // produccion_jugadores ::= Nombre DosPuntos produccion_nombres Coma Tipo DosPuntos produccion_tipo Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // produccion_jugadores ::= Tipo DosPuntos produccion_tipo Coma Nombre DosPuntos produccion_nombres Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // produccion_jugadores ::= Tipo DosPuntos produccion_tipo Coma PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Nombre DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // produccion_jugadores ::= PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Tipo DosPuntos produccion_tipo Coma Nombre DosPuntos produccion_nombres 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // produccion_jugadores ::= PlanetasJugadores DosPuntos LlaveA produccion_planetas_jugadores LlaveC Coma Nombre DosPuntos produccion_nombres Coma Tipo DosPuntos produccion_tipo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarAtributosJugador(e, a, i);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_jugadores",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // produccion_tipo ::= Humano 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_tipo",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // produccion_tipo ::= Dificil 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_tipo",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // produccion_tipo ::= Facil 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_tipo",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // produccion_planetas_jugadores ::= NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_planetas_jugadores",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // produccion_planetas_jugadores ::= produccion_planetas_jugadores Coma NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.listadoPlanetasJugador(e, a);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_planetas_jugadores",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // estructura_tamaño_mapa ::= Filas DosPuntos Numero Coma Columnas DosPuntos Numero 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarTamaño(f, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño_mapa",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // estructura_tamaño_mapa ::= Columnas DosPuntos Numero Coma Filas DosPuntos Numero 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarTamaño(f, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_tamaño_mapa",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // estructura_neutrales_mapa ::= MostrarNaves DosPuntos produccion_booleana Coma MostrarEstadisticas DosPuntos produccion_booleana Coma Produccion DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarNeutrales(e, a, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_neutrales_mapa",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // estructura_neutrales_mapa ::= MostrarNaves DosPuntos produccion_booleana Coma Produccion DosPuntos Numero Coma MostrarEstadisticas DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarNeutrales(e, a, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_neutrales_mapa",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // estructura_neutrales_mapa ::= MostrarEstadisticas DosPuntos produccion_booleana Coma MostrarNaves DosPuntos produccion_booleana Coma Produccion DosPuntos Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarNeutrales(e, a, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_neutrales_mapa",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // estructura_neutrales_mapa ::= MostrarEstadisticas DosPuntos produccion_booleana Coma Produccion DosPuntos Numero Coma MostrarNaves DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarNeutrales(e, a, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_neutrales_mapa",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // estructura_neutrales_mapa ::= Produccion DosPuntos Numero Coma MostrarEstadisticas DosPuntos produccion_booleana Coma MostrarNaves DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarNeutrales(e, a, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_neutrales_mapa",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // estructura_neutrales_mapa ::= Produccion DosPuntos Numero Coma MostrarNaves DosPuntos produccion_booleana Coma MostrarEstadisticas DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarNeutrales(e, a, c);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructura_neutrales_mapa",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // produccion_nombres_mapa ::= NombreJugadores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_nombres_mapa",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // produccion_nombres_mapa ::= NombrePlanetas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_nombres_mapa",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // produccion_nombres_mapa ::= Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = e.toString().replaceAll("\"", "");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("produccion_nombres_mapa",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // struct_map ::= struct_map Coma ID DosPuntos produccion_nombres_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // struct_map ::= struct_map Coma Tamaño DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struct_map ::= struct_map Coma TamañoS DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // struct_map ::= struct_map Coma AlAzar DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // struct_map ::= struct_map Coma PlanetasNeutralesMapa DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // struct_map ::= struct_map Coma MapaCiego DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 5);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // struct_map ::= struct_map Coma Acumular DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 6);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // struct_map ::= struct_map Coma Neutrales DosPuntos CorcheteA estructura_neutrales_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 7);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // struct_map ::= struct_map Coma Finalizacion DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarObjetosMapa(e, a, aleft, aright, 8);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // struct_map ::= ID DosPuntos produccion_nombres_mapa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 1);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // struct_map ::= Tamaño DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // struct_map ::= TamañoS DosPuntos CorcheteA estructura_tamaño_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 2);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // struct_map ::= AlAzar DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // struct_map ::= PlanetasNeutralesMapa DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // struct_map ::= MapaCiego DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 5);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // struct_map ::= Acumular DosPuntos produccion_booleana 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 6);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // struct_map ::= Neutrales DosPuntos CorcheteA estructura_neutrales_mapa CorcheteC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 7);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // struct_map ::= Finalizacion DosPuntos Numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = manejadorSintactico.agregarUnAtributto(e, 8);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("struct_map",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
